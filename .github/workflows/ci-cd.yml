name: Dot CI-CD pipeline
on:
  workflow_dispatch:

jobs:
  create_server:
    name: 'Create and configure ec2 instance'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:

    # ======================================================
    # Checkout the branch infrastructure and the repository
    # ======================================================
    - uses: actions/checkout@v2
      name: 'Checkout repository and infrastructure branch'
      with:
        ref: main

    # ======================================================
    # Terraform setup
    # 
    # - secrets.TERRAFORM_API_TOKEN: is the Terraform
    # Cloud API Token.
    # ======================================================
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN}}
       # args: '-var="BUCKET_ID=dev"'
        
    - name: Terraform Init and Validate
      id: init
      working-directory: infra/instance/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color 
      working-directory: infra/instance/
      continue-on-error: true
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: infra/instance/
      run: terraform apply -auto-approve 
    
    - name: Get outputs
      uses: dflook/terraform-output@v1
      id: tf-outputs
      with:
        path: infra/instance/
      env:
        TERRAFORM_CLOUD_TOKENS: app.terraform.io=${{ secrets.TERRAFORM_API_TOKEN}}
    - name: Print the server_dns
      run: echo "The server_dns is ${{ steps.tf-outputs.outputs.dot_server_dns }}"
    - name: Print the server_ip
      run: echo "The server_ip is ${{ steps.tf-outputs.outputs.dot_server_dns }}"
    - name: Print the bucket_id
      run: echo "The bucket_id is ${{ steps.tf-outputs.outputs.dot_bucket_id }}"
    - name: Print the bucket_domain_name
      run: echo "Thebucket_domain_name is ${{ steps.tf-outputs.outputs.dot_bucket_domain_name}}"
    - name: Print the bucket_website_endpoint
      run: echo "The bucket_website_endpoint is ${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }}"

    - name: Execute SSH commmands on remote server and install dependencies
      uses: appleboy/ssh-action@v0.1.7
      with:
         host: '${{ steps.tf-outputs.outputs.dot_server_dns }}'
         username: 'ubuntu'
         key: '${{ secrets.SSH_PRIVATE_KEY }}'
         port: '22'
         script: |
          # #Install Ruby 2.0, Ruby Gem, Jekyll, awscli, on the server
          sudo apt update 
          #sudo apt install ruby-full -y
          sudo apt-get install ruby-full rubygems build-essential zlib1g-dev -y
          sudo gem install minima
          sudo gem install jekyll-feed
          sudo gem install jekyll bundler 

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

    - name: Execute SSH commmands on remote server, clone repo and build 
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: '${{ steps.tf-outputs.outputs.dot_server_dns }}'
        username: 'ubuntu'
        key: '${{ secrets.SSH_PRIVATE_KEY }}'
        port: '22'
        script: |
          rm -rf bootstrap 
          git clone https://github.com/twbs/bootstrap.git 
          cd bootstrap 
          jekyll new _gh_pages 
          cd _gh_pages
          echo "Github Action name: ${{github.job}}" > version.txt
          echo "Github Action build number: ${{github.run_number}}" >> version.txt 
          jekyll build --incremental
          aws s3 cp "./" s3://dot-bucket-1234567890 --recursive
          aws s3 ls s3://dot-bucket-1234567890
    
     #- name: Update deployment status (success)
      # if: success()
      # uses: chrnorm/deployment-status@releases/v1
      # with:
       #  token: ${{ secrets.GITHUB_TOKEN }}
       #  target_url: http://${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }}
        # state: 'success'
        # deployment_id: ${{ github.run_id }}      

        
        # ======================================================
        # When we're done, we need to update the PR one more time
        # with the results of the apply.
        # ======================================================  



    - uses: martialonline/workflow-status@v3
        id: check
      - run: |
        echo "job ${{ github.run_id }} has been deployed successfully"
        
        URL: http://${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }}


    - name: Update status
      if: success()
      uses: actions/github-script@v5
      env:
        output: "terraform\n${{ steps.tf-outputs.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

        script: |
          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.output}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          #const output = `#### server created and deployed successfully
        
          #URL: http://${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }};

          github.rest.issues.createComment({
            issue_number: ${{ github.run_id }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
          