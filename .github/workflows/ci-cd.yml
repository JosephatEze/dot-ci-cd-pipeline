name: Dot CI-CD pipeline

on:
  workflow_dispatch:

jobs:
  create:
    name: 'Create and configure ec2 instance'
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:

    # ======================================================
    # Checkout the branch infrastructure and the repository
    # ======================================================
    - uses: actions/checkout@v2
      name: 'Checkout repository and infrastructure branch'
      with:
        ref: main

    # ======================================================
    # Terraform setup
    # 
    # - secrets.TERRAFORM_API_TOKEN: is the Terraform
    # Cloud API Token.
    # ======================================================
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.11
        cli_config_credentials_token: ${{ secrets.TERRAFORM_API_TOKEN}}
       # args: '-var="BUCKET_ID=dev"'
        
    - name: Terraform Init and Validate
      id: init
      working-directory: infra/instance/
      run: |
        terraform init
        terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color 
      working-directory: infra/instance/
      continue-on-error: true
          
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      id: apply
      working-directory: infra/instance/
      run: terraform apply -auto-approve 
    
    - name: Get outputs
      uses: dflook/terraform-output@v1
      id: tf-outputs
      with:
        path: infra/instance/
      env:
        TERRAFORM_CLOUD_TOKENS: app.terraform.io=${{ secrets.TERRAFORM_API_TOKEN}}
    - name: Print the server_dns
      run: echo "The server_dns is ${{ steps.tf-outputs.outputs.dot_server_dns }}"
    - name: Print the server_ip
      run: echo "The server_ip is ${{ steps.tf-outputs.outputs.dot_server_dns }}"
    - name: Print the bucket_id
      run: echo "The bucket_id is ${{ steps.tf-outputs.outputs.dot_bucket_id }}"
    - name: Print the bucket_domain_name
      run: echo "Thebucket_domain_name is ${{ steps.tf-outputs.outputs.dot_bucket_domain_name}}"
    - name: Print the bucket_website_endpoint
      run: echo "The bucket_website_endpoint is ${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }}"
    
    # ======================================================
    # Install dependencies in the server
    # ======================================================
    - name: Execute SSH commmands on remote server and install dependencies
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: '${{ steps.tf-outputs.outputs.dot_server_dns }}'
        username: 'ubuntu'
        key: '${{ secrets.SSH_PRIVATE_KEY }}'
        port: '22'
        script: |
          #Install Ruby 2.0, Ruby Gem, Jekyll, awscli, on the server
          sudo apt update -y
          #sudo apt install ruby-full -y
          sudo apt-get install ruby-full rubygems build-essential zlib1g-dev -y
          gem install jekyll bundler 

          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          .aws/install -y

    - name: Execute SSH commmands on remote server and install dependencies
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: '${{ steps.tf-outputs.outputs.dot_server_dns }}'
        username: 'ubuntu'
        key: '${{ secrets.SSH_PRIVATE_KEY }}'
        port: '22'
        script: |
          git clone git@github.com:twbs/bootstrap.git
          cd bootstrap 
          jekyll build
          cd _gh_pages
          echo ${{github.job}} > version.txt
          echo ${{github.run_number}} >> version.txt 
          cd ../../
          aws s3 cp bootstrap s3://dot-bucket-1234567890
          aws s3 ls s3://dot-bucket-1234567890

        
        # - uses: shallwefootball/s3-upload-action@master
          #   name: Upload S3
          #   id: S3
            # with:
            #  aws_key_id: ${{ secrets.AWS_KEY_ID }}
            #  aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
            #  aws_bucket: dot-bucket-1234567890
            #  source_dir: 'bootstrap'  
            #  destination_dir: ''  

        #- name: Update deployment status (success)
        # if: success()
          #uses: chrnorm/deployment-status@releases/v1
        #  with:
          #  token: ${{ secrets.GITHUB_TOKEN }}
          #  target_url: https://${{ steps.tf-outputs.outputs.dot_server_dns }}
        #   state: 'success'
            #deployment_id: ${{ steps.test.outputs.deployment_id }}      

        
        # ======================================================
        # When we're done, we need to update the PR one more time
        # with the results of the apply.
        # ======================================================      
    - name: Update status
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### server created
           > job ${{ github.run_id }} has been deployed successfully
        
          URL: http://${{ steps.tf-outputs.outputs.dot_bucket_website_endpoint }};

          github.rest.issues.createComment({
            issue_number: ${{ github.run_id }},
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })